{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"mID",
				"mpIDpattern\tstatement"
			],
			[
				"ap",
				"api_key\tstatement"
			],
			[
				"write",
				"writerow\tfunction"
			],
			[
				"instru",
				"instruction"
			],
			[
				"csv",
				"csvfile\tstatement"
			],
			[
				"ins",
				"instruction_candidate\tstatement"
			],
			[
				"match",
				"match_degree\tfunction"
			],
			[
				"matc",
				"match_degree\tfunction"
			],
			[
				"to",
				"tosearch\tparam"
			],
			[
				"overf",
				"overflowLeft\tstatement"
			],
			[
				"overfl",
				"overflowRight\tstatement"
			],
			[
				"scr",
				"script_words\tstatement"
			],
			[
				"left",
				"leftTail\tstatement"
			],
			[
				"right",
				"rightTail\tstatement"
			],
			[
				"script",
				"script_words\tstatement"
			],
			[
				"max",
				"max_tail_length\tstatement"
			],
			[
				"scri",
				"script_words\tstatement"
			],
			[
				"purge",
				"purgeList\tparam"
			],
			[
				"txt",
				"txtlst"
			],
			[
				"cean",
				"cleanedCorpus\tstatement"
			],
			[
				"get",
				"get_keywords\tfunction"
			],
			[
				"txtl",
				"txtlst\tstatement"
			],
			[
				"corp",
				"corpus_list\tparam"
			],
			[
				"raw",
				"raw_seconds\tparam"
			],
			[
				"appen",
				"appendRows\tfunction"
			],
			[
				"call",
				"call_papa_google"
			],
			[
				"byte",
				"bytearray\tclass"
			],
			[
				"total",
				"totalFrames\tstatement"
			],
			[
				"chunk",
				"chunkLength\tstatement"
			],
			[
				"unp",
				"unpstr\tstatement"
			],
			[
				"getn",
				"getnchannels\tfunction"
			],
			[
				"ge",
				"get_wav_data\tfunction"
			],
			[
				"API",
				"API_KEY\tstatement"
			],
			[
				"out",
				"outPoint"
			],
			[
				"wrote",
				"wrotePart2"
			],
			[
				"chunks",
				"chunksOfSilence\tstatement"
			],
			[
				"save",
				"saveas_1\tparam"
			],
			[
				"_",
				"_file\tstatement"
			],
			[
				"data",
				"dataToWrite"
			],
			[
				"pad",
				"paddingFrames"
			],
			[
				"padding",
				"paddingFrames\tstatement"
			],
			[
				"COLOR",
				"COLOR_GREEN\tinstance"
			],
			[
				"seg",
				"segment\tstatement"
			],
			[
				"print",
				"printStatements\tstatement"
			],
			[
				"segme",
				"segment\tstatement"
			],
			[
				"next",
				"nextSegment\tstatement"
			],
			[
				"local",
				"localEnvironment\tstatement"
			],
			[
				"pri",
				"printStatements\tstatement"
			],
			[
				"sur",
				"surface_form\tstatement"
			],
			[
				"under",
				"underlying"
			],
			[
				"new",
				"new_word\tstatement"
			],
			[
				"found",
				"foundSegment"
			],
			[
				"key",
				"keyFeatures"
			],
			[
				"segmen",
				"segmentPoA"
			],
			[
				"sem",
				"segmentPoA"
			],
			[
				"file",
				"filefunctions\tmodule"
			],
			[
				"global",
				"globalVar\tstatement"
			],
			[
				"str",
				"string\tstatement"
			],
			[
				"load",
				"load_hayes\tfunction"
			],
			[
				"underl",
				"underlying_form\tforstmt"
			],
			[
				"o",
				"load_hayes\tfunction"
			],
			[
				"audio",
				"audio_file"
			],
			[
				"float",
				"floatingminute\tstatement"
			],
			[
				"minute",
				"minuteIndex"
			],
			[
				"getfra",
				"getframerate\tfunction"
			],
			[
				"al",
				"alternative\tforstmt"
			],
			[
				"json",
				"jsonobj\tstatement"
			],
			[
				"input",
				"inputList\tstatement"
			],
			[
				"inpu",
				"inputfile\twithstmt"
			],
			[
				"ordered",
				"OrderedDict"
			],
			[
				"keylog",
				"keylogdata"
			],
			[
				"curren",
				"currentTime"
			],
			[
				"keylo",
				"keylogData\tstatement"
			],
			[
				"rand",
				"randint\tstatement"
			],
			[
				"ran",
				"random\tmodule"
			],
			[
				"R",
				"return"
			],
			[
				"enco",
				"encodedTitles\tstatement"
			],
			[
				"wr",
				"writer\tfunction"
			],
			[
				"st",
				"struct_time\tclass"
			],
			[
				"se",
				"strftime\tfunction"
			],
			[
				"time",
				"timestamps\tstatement"
			],
			[
				"K_Q",
				"K_q\tinstance"
			],
			[
				"init",
				"initTime\tstatement"
			],
			[
				"temp",
				"temp_j"
			],
			[
				"bu",
				"bubbleOuterLEnd"
			],
			[
				"bubb",
				"bubblesort"
			],
			[
				"return",
				"returnMultiply"
			],
			[
				"stdnt",
				"stdntStore1"
			],
			[
				"i",
				"i"
			],
			[
				"sav",
				"save0_loop"
			],
			[
				"r2",
				"r2"
			],
			[
				"0x",
				"0xfffffffc"
			],
			[
				"reg",
				"regStore7"
			],
			[
				"comp",
				"computeAve"
			],
			[
				"stdn",
				"stdnt_loop"
			],
			[
				"stud",
				"student_endloop"
			],
			[
				"stu",
				"student"
			],
			[
				"ave_",
				"ave_loop"
			],
			[
				"ave",
				"ave_endloop"
			],
			[
				"end",
				"end_if"
			],
			[
				"root",
				"rootNode"
			],
			[
				"paramet",
				"parameterSet"
			],
			[
				"simu",
				"simulationLength"
			],
			[
				"timeTo",
				"timeToTakeoff"
			],
			[
				"landing",
				"landingRate"
			],
			[
				"arr",
				"arrayLength"
			],
			[
				"calc",
				"calcAverage"
			],
			[
				"arra",
				"array"
			],
			[
				"array",
				"arrayLength"
			],
			[
				"take",
				"takeofValsIndex"
			],
			[
				"takeo",
				"takeofValsIndex"
			],
			[
				"min",
				"min"
			],
			[
				"average",
				"averageValsForTakeoff"
			],
			[
				"maxT",
				"maxTakeoffQ"
			],
			[
				"landin",
				"landingQueue"
			],
			[
				"r",
				"runway"
			],
			[
				"coun",
				"countdownTakeoff"
			],
			[
				"count",
				"countdownLanding"
			],
			[
				"timeto",
				"timeToTakeoff"
			],
			[
				"landn",
				"landingQueue"
			],
			[
				"air",
				"airplaneCode"
			],
			[
				"length",
				"lengthAcc"
			],
			[
				"my",
				"myBack"
			],
			[
				"n",
				"n"
			],
			[
				"minu",
				"minutes"
			],
			[
				"game",
				"gameSpeed"
			],
			[
				"sort",
				"sortIntoBins"
			],
			[
				"construct",
				"constructDict\tfunction"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "- can we fit in 240 tokens? Will need to pilot to find out\n    > 2x3x4 ANOVA ==> 2x3x3 {180 tokens} ***PLUS CALIBRATION??***\n        no vib; tadoma; lowfi\n    }\n    hand *30    *30     *30\n    neck *30    *30     *30\n        +/-v stops; +/-v fricatives; H/L vowels (drop +-nasal vowels)\n- re-record min pairs\n    > done\n- update software so that vibration styles are equalized, and\n    > done\n- accommodate a within subject design\n    > done\n- also automate the calibration phase\n    > done\n\n======\n\nanalysis:\nR?\n\nInterspeech\nJASA - Deadline for June: joint meeting in Victoria CAA ASA\nJASA EL (Express Letters)\n    * Paper\n    (POMA - not rec.)\n------\nAug. 1st: CAA two page \n\nMid/late march: finish running subjects\n1 month to analyze\n\ntodos:\n> make timeline\n> monthly timelines/meetings until we need more\n> \nBryan away from march 3rd-28th\nKaron also away for a chunk of march (>15th march)\n(poss. meeting the 1st)\nEarly april meeting: \n\n",
			"settings":
			{
				"buffer_size": 941,
				"line_ending": "Unix",
				"name": "- can we fit in 240 tokens? Will need to pilot to"
			}
		},
		{
			"file": "main.py",
			"settings":
			{
				"buffer_size": 23107,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Anaconda Python Builder",
				""
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "d",
		"selected_items":
		[
			[
				"d",
				"Anaconda: Disable linting on this file"
			],
			[
				"dis",
				"Anaconda: Disable linting on this file"
			],
			[
				"",
				"Anaconda: Disable linting on this file"
			],
			[
				"disa",
				"Anaconda: Disable linting on this file"
			],
			[
				"theme",
				"UI: Select Color Scheme"
			],
			[
				"mater",
				"Material Theme: Configuration"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"materi",
				"Material Theme: Activate theme"
			],
			[
				"material",
				"Material Theme: Configuration"
			],
			[
				"activ",
				"Material Theme: Activate theme"
			],
			[
				"disabl",
				"Anaconda: Disable linting on this file"
			],
			[
				"disable lin",
				"Anaconda: Disable linting on this file"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"lin",
				"Anaconda: Disable linting on this file"
			],
			[
				"materia",
				"Material Theme: Activate theme"
			],
			[
				"Mat",
				"Material Theme: Activate theme"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"package control remo",
				"Package Control: Remove Package"
			],
			[
				"package control en",
				"Package Control: Enable Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"lint",
				"Anaconda: Disable linting on this file"
			],
			[
				"lintin",
				"Anaconda: Disable linting on this file"
			],
			[
				"li",
				"Anaconda: Disable linting on this file"
			],
			[
				"linting",
				"Anaconda: Disable linting on this file"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"RISC",
				"Package Control: Discover Packages"
			],
			[
				"syntax",
				"Set Syntax: MIPS"
			],
			[
				"ya",
				"Set Syntax: YAML"
			],
			[
				"Mips",
				"Set Syntax: MIPS"
			],
			[
				"assemb",
				"Set Syntax: GDB Disassembly"
			],
			[
				"syntax plai",
				"Set Syntax: Plain Text"
			],
			[
				"syntax ",
				"Set Syntax: Textile"
			],
			[
				"asm",
				"Set Syntax: GDB Disassembly"
			],
			[
				"gdb sett",
				"Preferences: SublimeGDB Settings – Default"
			],
			[
				"gdb ",
				"SublimeGDB: Stop Debugging"
			],
			[
				"gdb run",
				"SublimeGDB: Start Debugging"
			],
			[
				"GDB",
				"Preferences: SublimeGDB Settings – Default"
			],
			[
				"anaconda ",
				"Anaconda: Disable linting on this file"
			],
			[
				"anaconda lintin",
				"Anaconda: Disable linting on this file"
			],
			[
				"Settings",
				"Preferences: Settings - User"
			],
			[
				"default",
				"Preferences: Settings - Default"
			],
			[
				"key ",
				"Preferences: Key Bindings - Default"
			],
			[
				"gdb def",
				"Preferences: SublimeGDB Settings – Default"
			],
			[
				"gdb de",
				"SublimeGDB: Stop Debugging"
			],
			[
				"gdb",
				"Preferences: SublimeGDB Settings – Default"
			],
			[
				"package instal",
				"Package Control: Install Package"
			],
			[
				"package rem",
				"Package Control: Remove Package"
			],
			[
				"sublim",
				"SublimeGDB: Start Debugging"
			],
			[
				"Sublime G",
				"Preferences: SublimeGDB Settings – Default"
			],
			[
				"package control install",
				"Package Control: Install Package"
			],
			[
				"view",
				"View: Toggle Status Bar"
			],
			[
				"mini",
				"View: Toggle Minimap"
			],
			[
				"error",
				"Anaconda: Show error list"
			]
		],
		"width": 461.0
	},
	"console":
	{
		"height": 418.0,
		"history":
		[
			"print j",
			"gdb",
			"Quit",
			"help",
			"next",
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": true,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": true
	},
	"file_history":
	[
		"/home/dvdmrn/Documents/hapticspeech/main.py",
		"/home/dvdmrn/Documents/hapticspeech/responses/goto_server",
		"/home/dvdmrn/Documents/hapticspeech/responses/upload_data.sh",
		"/home/dvdmrn/Documents/hapticspeech/playback.py",
		"/home/dvdmrn/Documents/hapticspeech/voicingfilter.py",
		"/home/dvdmrn/Documents/hapticspeech/utilities.py",
		"/home/dvdmrn/Documents/hapticspeech/voicingfilter.pyc",
		"/home/dvdmrn/Documents/randomword.py",
		"/home/dvdmrn/Documents/corpus.txt",
		"/home/dvdmrn/Documents/hapticspeech/playback",
		"/home/dvdmrn/Documents/speech_recog_test/heatmap.py",
		"/home/dvdmrn/Documents/hapticspeech/parameters.py",
		"/home/dvdmrn/Documents/hapticspeech/playback_lowfi.py",
		"/home/dvdmrn/Documents/hapticspeech/playback_voicingrms.py",
		"/home/dvdmrn/Documents/hapticspeech/stimuli/testrecurse.py",
		"/home/dvdmrn/Documents/hapticspeech/main-lowfi.py",
		"/home/dvdmrn/Documents/hapticspeech/main-minpair.py",
		"/home/dvdmrn/Documents/autoeditor/main.py",
		"/home/dvdmrn/Documents/speech-text-script-processing/main.py",
		"/home/dvdmrn/Documents/speech-text-script-processing/readme.md",
		"/home/dvdmrn/Documents/speech-text-script-processing/STT.py",
		"/home/dvdmrn/Documents/speech-text-script-processing/transcriptmatch.py",
		"/home/dvdmrn/Documents/speech-text-script-processing/STT-safe.py",
		"/home/dvdmrn/Documents/speech_recog_test/script-short.txt",
		"/home/dvdmrn/Documents/speech_script_processing/transcriptmatch.py",
		"/home/dvdmrn/Documents/speech_script_processing/STT-safe.py",
		"/home/dvdmrn/Downloads/parser.py",
		"/home/dvdmrn/Documents/speech_script_processing/partition.py",
		"/home/dvdmrn/Documents/speech_recog_test/transcriptmatch.py",
		"/home/dvdmrn/Documents/speech_recog_test/STT.py",
		"/home/dvdmrn/Documents/speech_recog_test/transcript",
		"/home/dvdmrn/Documents/autoeditor/autoeditorpairs.py",
		"/home/dvdmrn/Documents/speech_recog_test/transcriptmatch",
		"/home/dvdmrn/Documents/speech_recog_test/partition.py",
		"/home/dvdmrn/Documents/speech_recog_test/test.py",
		"/home/dvdmrn/Documents/hapticspeech/.gitignore",
		"/home/dvdmrn/Documents/autoeditor/minimalpairs.csv",
		"/home/dvdmrn/Documents/autoeditor/old/autoeditor-pairs.py",
		"/home/dvdmrn/Documents/autoeditor/processing_recommendations.txt",
		"/home/dvdmrn/Documents/autoeditor/autoeditor-pairs.py",
		"/home/dvdmrn/Documents/voice-stim-rec/main.py",
		"/home/dvdmrn/Documents/STTtests/speech-to-text/slow.py",
		"/home/dvdmrn/Documents/STTtests/test.py",
		"/home/dvdmrn/Downloads/Anaconda2-5.0.1-Linux-x86_64.sh",
		"/usr/include/portaudio.h",
		"/etc/pulse/default.pa",
		"/home/dvdmrn/Documents/STTtests/speech-to-text/transcripts/w-transcript.txt",
		"/home/dvdmrn/Documents/STTtests/speech-to-text/transcripts/g-transcript.txt",
		"/home/dvdmrn/Downloads/transcription-045e1040b248.json",
		"/home/dvdmrn/Documents/PhaserTest/part1.html",
		"/home/dvdmrn/Documents/Ryan/assignment 5 (Ryan)/varli_output.txt",
		"/home/dvdmrn/Downloads/phaser.js",
		"/home/dvdmrn/Documents/Ryan/assignment 5 (Ryan)/testing.py",
		"/home/dvdmrn/Downloads/Movie_Themes_-_1941.mid",
		"/home/dvdmrn/Documents/Ryan/assignment 5 (Ryan)/homework 5 skeleton.py",
		"/home/dvdmrn/Documents/Ryan/assignment 5 (Ryan)/superscriptTest.py",
		"/home/dvdmrn/Downloads/ipa2hayes (1).txt",
		"/home/dvdmrn/Downloads/ipa2hayes.txt",
		"/home/dvdmrn/Documents/Ryan/assignment 5 (Ryan)/varli_dummy.txt",
		"/home/dvdmrn/Documents/Ryan/assignment 5 (Ryan)/varli.txt",
		"/media/dvdmrn/DR-40/homework 5 skeleton.py",
		"/home/dvdmrn/Documents/Ryan/assignment 5 (Ryan)/test.txt",
		"/home/dvdmrn/Documents/Ryan/assignment 5 (Ryan)/ipa2hayes.txt",
		"/home/dvdmrn/Documents/Ryan/assignment 5 (Ryan)/filefunctions.py",
		"/media/dvdmrn/USB DISK/assignment 5 (Ryan)/homework 5 skeleton.py",
		"/home/dvdmrn/Documents/Ryan/ipa2hayes.txt",
		"/home/dvdmrn/Documents/speech-to-text-websockets-python/output/hypotheses.txt",
		"/home/dvdmrn/Documents/transcription/sgerofskyTranscript.txt",
		"/home/dvdmrn/Documents/transcription/purge.sh",
		"/home/dvdmrn/Documents/transcription/ultrawavslicer.py",
		"/home/dvdmrn/Documents/transcription/stt.py",
		"/home/dvdmrn/Documents/speech-to-text-websockets-python/requirements.txt",
		"/home/dvdmrn/Documents/speech-to-text-websockets-python/helper.py",
		"/home/dvdmrn/Documents/transcription/stt-gerofsky.py",
		"/home/dvdmrn/Documents/transcription/karontranscribe.py",
		"/home/dvdmrn/Documents/transcription/unitytranscribe.py",
		"/home/dvdmrn/Documents/speech-to-text-websockets-python/sttClient.py",
		"/home/dvdmrn/Documents/speech-to-text-websockets-python/recordings.txt",
		"/home/dvdmrn/Documents/speech-to-text-websockets-python/old recordings/10-14-hypotheses.txt",
		"/home/dvdmrn/Documents/speech-to-text-websockets-python/output/2.json.txt",
		"/home/dvdmrn/Documents/transcription/unified/10Label_transcription.txt",
		"/home/dvdmrn/Documents/speech-to-text-websockets-python/output/0.json.txt",
		"/home/dvdmrn/Documents/transcription/gerofsky1_transcription.txt",
		"/home/dvdmrn/Documents/transcription/stt-personal.py",
		"/home/dvdmrn/Documents/transcription/ksample2_transcription.txt",
		"/home/dvdmrn/Documents/transcription/test.sh",
		"/home/dvdmrn/Documents/transcription/Untitled Document",
		"/home/dvdmrn/Documents/transcription/.gitignore",
		"/home/dvdmrn/Documents/transcription/waveslicer.py",
		"/home/dvdmrn/Documents/transcription/SpeechToTextClient.py",
		"/media/dvdmrn/wing1/SPIN/worldhaptics/async_transcribe.py",
		"/home/dvdmrn/.gimp-2.8/menurc",
		"/home/dvdmrn/Documents/STL-to-SRT-conversion/test2_converted.srt",
		"/home/dvdmrn/Documents/STL-to-SRT-conversion/STLconvert.py",
		"/home/dvdmrn/Documents/openSOROS/webscraper/visualize_similarity.py",
		"/home/dvdmrn/Documents/STL-to-SRT-conversion/test.stl",
		"/home/dvdmrn/Documents/STL-to-SRT-conversion/test2.stl",
		"/home/dvdmrn/Documents/openSOROS/webscraper/reddit_similarity.py",
		"/home/dvdmrn/Documents/STL-to-SRT-conversion/test_converted.srt",
		"/home/dvdmrn/Documents/openSOROS/webscraper/redditscraper.py",
		"/home/dvdmrn/Desktop/scp notes",
		"/home/dvdmrn/Desktop/hapspeech_f0balance.txt",
		"/home/dvdmrn/Desktop/triangle.py",
		"/home/dvdmrn/Desktop/dictTest.py",
		"/home/dvdmrn/Dropbox/cpsc221/theory 3/ubcscp.sh",
		"/home/dvdmrn/Documents/AV-study/stim_delivery/animationplayer/stimDeliveryWithKeylog.py",
		"/home/dvdmrn/Dropbox/cpsc221/lab9/avl.cc",
		"/home/dvdmrn/Desktop/noisegen.py",
		"/home/dvdmrn/Documents/hashfunctiontests.py",
		"/media/dvdmrn/wing/Google Drive/SPIN/Voodle/DIS submission/Voodle-DIS-2017/VoodleMain.tex",
		"/home/dvdmrn/Dropbox/cpsc221/lab5/.vscode/launch.json",
		"/home/dvdmrn/Dropbox/cpsc221/lab5/bst.cc",
		"/home/dvdmrn/Dropbox/cpsc221/lab 7/driver.cc",
		"/home/dvdmrn/Dropbox/cpsc221/lab 7/Hashtable.cc",
		"/home/dvdmrn/Dropbox/cpsc221/theory 3/ubcpush",
		"/home/dvdmrn/Dropbox/cpsc221/prog3/readme.txt",
		"/home/dvdmrn/Dropbox/cpsc221/prog3/deploy/mapping.txt",
		"/home/dvdmrn/Dropbox/cpsc221/prog3/deploy/readme.txt",
		"/home/dvdmrn/Dropbox/cpsc221/prog3/deploy/generator8.cpp",
		"/home/dvdmrn/Dropbox/cpsc221/prog3/generators/repeatFind.cpp",
		"/home/dvdmrn/Dropbox/cpsc221/prog3/generators/insertRandDeleteAlotThenFind (copy).cpp",
		"/home/dvdmrn/Dropbox/cpsc221/prog3/generators/pigeonholedestroyer.cpp",
		"/home/dvdmrn/Dropbox/cpsc221/prog3/generators/manyDeleteThenInsertSearch (copy).cpp",
		"/home/dvdmrn/Dropbox/cpsc221/prog3/generators/insertRemoveFromStart.cpp",
		"/home/dvdmrn/Dropbox/cpsc221/prog3/generators/old generators/generator4.cpp",
		"/home/dvdmrn/Dropbox/cpsc221/prog3/generators/old generators/generator5.cpp",
		"/home/dvdmrn/Dropbox/cpsc221/prog3/generators/old generators/generator3.cpp",
		"/home/dvdmrn/Dropbox/cpsc221/prog3/generators/old generators/generator2.cpp"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"/home/dvdmrn/Dropbox/cpsc221/prog3/removeFromStart",
			"",
			"./testWordBankCorpus.csv",
			"",
			"/home/dvdmrn/Documents/AV-study/viapoint editor,-*~",
			"/home/dvdmrn/Documents/AV-study/viapoint editor -*~",
			"/home/dvdmrn/Documents/AV-study/viapoint editor"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"accuracy_target",
			"calibration",
			"awaiting",
			"print",
			"playlist",
			"print",
			"K_RETURN",
			"ENTER",
			"gain",
			"playbackScreen(",
			"record",
			"response",
			"play_wavfile(",
			"playback",
			"response",
			".group(0)",
			"trial(",
			"breakD",
			"experimentCtrlFlow",
			"found",
			"recordScreen",
			"PRINT",
			"CREDENTIALS",
			"files",
			"RESULTS",
			"appendRows(",
			"prep_corpus",
			"corpus",
			"clean_",
			"instruction",
			"transcript.csv",
			"print",
			"\n    ",
			"© [",
			"max_tail_length",
			"print",
			"+iOffset",
			"kw[\"i\"]",
			"sl",
			"© \\[[\\w\\s.,/#!$%^&*;:=-_`~()'’]+]",
			"©",
			"clean_corpus",
			"print(",
			"© \\[(\\w|\\s|\\.|\\,|\\/|\\#|\\!|\\$|\\%|\\^|\\&|\\*|\\;|\\:|\\{|\\}|\\=|\\-|\\_|\\`|\\~|\\(|\\)|\\'|\\’)+\\]",
			"© \\[(\\w|\\s)+\\]",
			"\"",
			"AUDIO_FILE",
			"playback.",
			"playback",
			"voicingfilter.",
			"voicingfilter",
			"write_fra",
			"print",
			"Contrast",
			"write_frames",
			"allData",
			"write_frames",
			"data",
			"f.getnframes",
			"saveas_0",
			"wv0data",
			"inPoin",
			"wv0Data",
			"wv0",
			"red",
			"g",
			"print",
			"g",
			".txt",
			"varli",
			"print",
			"hayes",
			"entryTuple",
			"print",
			"element",
			"print",
			"segment",
			"print",
			"output",
			"n",
			"char_index",
			"index",
			"nasal",
			"print",
			"nasal",
			"print",
			"path_to_varli",
			"\\[\\d\\d:\\d\\d:\\d\\d] \\D\\D?:",
			"] \\D\\D?:",
			"\\[\\d\\d:\\d\\d:\\d\\d]",
			".*\\n.*\\n",
			" G:",
			"G:",
			" G:",
			"G:",
			"] G:",
			"\\d\\d:\\d\\d",
			"fileNumber",
			"1:",
			"recordings",
			"iletemplate",
			"oneminute",
			"frames",
			"numberofminutes",
			"writeFile",
			"numberofminutes",
			"slicedSoFar",
			"framerate",
			"wavfile",
			"print",
			"keylogData",
			"keylogData[",
			"print(",
			"print",
			"keylogData",
			"trialIndex",
			"shortest_list",
			"trialLoop()",
			"keylogData",
			"hasExported",
			"ball",
			"ball()",
			"keylogData",
			"csv.writer",
			"SEQUENTIAL_CUTOFF",
			"cutoff",
			"findStatsSequential",
			"avlTree_root"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			", ",
			"|_",
			"ri",
			"0",
			"    "
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 941,
						"regions":
						{
						},
						"selection":
						[
							[
								811,
								811
							]
						],
						"settings":
						{
							"auto_name": "- can we fit in 240 tokens? Will need to pilot to",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 414.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "main.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 23107,
						"regions":
						{
						},
						"selection":
						[
							[
								17683,
								17683
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9700.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 144.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 118.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "hapticspeech.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Documents/draggableRectangle.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 392.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 233.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
